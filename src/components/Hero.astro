---
import Image from 'astro/components/Image.astro';
import product1 from '@/assets/images/carrousel/product-1.png';
import product2 from '@/assets/images/carrousel/product-2.png';
import product3 from '@/assets/images/carrousel/product-3.png';
import product4 from '@/assets/images/carrousel/product-4.png';

interface Props {
  images?: string[];
}

const images = [
  product1,
  product2,
  product3,
  product4,
];
---

<section class="bg-gradient-to-r from-gray-600 to-gray-500 py-16">
  <div class="container mx-auto px-4">
    <div class="max-w-6xl mx-auto">
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 items-center">
        <div class="text-center lg:text-left">
          <h1 class="text-4xl md:text-5xl font-bold text-white mb-6">Fernando Lis</h1>
          <p class="text-xl text-gray-100 mb-8">
            Empresa Argentina líder en importación de Marroquinería y Accesorios de Moda
          </p>
          <div class="flex flex-col sm:flex-row justify-center lg:justify-start gap-4">
            <a href="/login" class="bg-amber-500 hover:bg-amber-600 text-white font-medium py-3 px-6 rounded-lg transition-colors shadow-md">
              INGRESAR
            </a>
            <a href="/contacto" class="bg-white hover:bg-gray-100 text-gray-700 font-medium py-3 px-6 rounded-lg border border-white transition-colors">
              QUIERO COMPRAR
            </a>
          </div>
        </div>
        
        <div class="carousel-container relative overflow-hidden rounded-lg shadow-xl">
          <div id="carousel" class="carousel flex transition-transform duration-500 ease-in-out">
            {images.map((image, index) => (
              <div class="carousel-slide min-w-full">
                <Image
                  src={image}
                  alt={`Producto Dolape SA ${index + 1}`} 
                  class="w-full h-[400px] object-cover"
                  loading={index === 0 ? "eager" : "lazy"}
                />
              </div>
            ))}
          </div>
          
          <div class="carousel-controls absolute bottom-4 left-0 right-0 flex justify-center gap-2">
            {images.map((_, index) => (
              <button 
                class="carousel-indicator w-3 h-3 rounded-full bg-white/50 hover:bg-white transition-colors" 
                data-index={index}
                aria-label={`Go to slide ${index + 1}`}
              ></button>
            ))}
          </div>
          
          <button class="carousel-nav prev absolute left-4 top-1/2 -translate-y-1/2 bg-black/30 hover:bg-black/50 text-white w-10 h-10 rounded-full flex items-center justify-center transition-colors" aria-label="Previous slide">
            <span class="sr-only">Previous</span>
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" class="w-6 h-6">
              <path stroke-linecap="round" stroke-linejoin="round" d="M15.75 19.5L8.25 12l7.5-7.5" />
            </svg>
          </button>
          
          <button class="carousel-nav next absolute right-4 top-1/2 -translate-y-1/2 bg-black/30 hover:bg-black/50 text-white w-10 h-10 rounded-full flex items-center justify-center transition-colors" aria-label="Next slide">
            <span class="sr-only">Next</span>
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" class="w-6 h-6">
              <path stroke-linecap="round" stroke-linejoin="round" d="M8.25 4.5l7.5 7.5-7.5 7.5" />
            </svg>
          </button>
        </div>
      </div>
    </div>
  </div>
</section>

<script>
  // Initialize carousel functionality
  function initCarousel() {
    const carousel = document.getElementById('carousel');
    const slides = document.querySelectorAll('.carousel-slide');
    const indicators = document.querySelectorAll('.carousel-indicator');
    const prevButton = document.querySelector('.carousel-nav.prev');
    const nextButton = document.querySelector('.carousel-nav.next');
    
    if (!carousel || slides.length === 0) return;
    
    let currentIndex = 0;
    const slideCount = slides.length;
    
    // Set initial active indicator
    updateIndicators();
    
    // Auto-advance carousel
    let autoplayInterval = setInterval(nextSlide, 5000);
    
    // Reset interval on user interaction
    function resetInterval() {
      clearInterval(autoplayInterval);
      autoplayInterval = setInterval(nextSlide, 5000);
    }
    
    // Update indicators
    function updateIndicators() {
      indicators.forEach((indicator, index) => {
        if (index === currentIndex) {
          indicator.classList.add('bg-white');
          indicator.classList.remove('bg-white/50');
        } else {
          indicator.classList.remove('bg-white');
          indicator.classList.add('bg-white/50');
        }
      });
    }
    
    // Go to specific slide
    function goToSlide(index: number) {
      currentIndex = index;
      if (carousel) {
        carousel.style.transform = `translateX(-${currentIndex * 100}%)`;
      }
      updateIndicators();
      resetInterval();
    }
    
    // Next slide function
    function nextSlide() {
      currentIndex = (currentIndex + 1) % slideCount;
      goToSlide(currentIndex);
    }
    
    // Previous slide function
    function prevSlide() {
      currentIndex = (currentIndex - 1 + slideCount) % slideCount;
      goToSlide(currentIndex);
    }
    
    // Event listeners
    prevButton?.addEventListener('click', prevSlide);
    nextButton?.addEventListener('click', nextSlide);
    
    // Indicator click events
    indicators.forEach((indicator, index: number) => {
      indicator.addEventListener('click', () => goToSlide(index));
    });
    
    // Pause autoplay on hover
    carousel.parentElement?.addEventListener('mouseenter', () => clearInterval(autoplayInterval));
    carousel.parentElement?.addEventListener('mouseleave', () => {
      autoplayInterval = setInterval(nextSlide, 5000);
    });
  }
  
  // Initialize when DOM is loaded
  document.addEventListener('DOMContentLoaded', initCarousel);
  
  // Initialize when Astro page is loaded/navigated
  document.addEventListener('astro:page-load', initCarousel);
</script>
